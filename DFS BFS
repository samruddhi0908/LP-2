from collections import defaultdict
 
class Graph:
 
    def __init__(self):
 
        self.graph = defaultdict(list)
 
    def addEdge(self, u, v):
        self.graph[u].append(v)
 
    def DFSUtil(self, v, visited):
 
        visited.add(v)
        print(v, end=' ')
 
        for neighbor in self.graph[v]:
            if neighbor not in visited:
                self.DFSUtil(neighbor, visited)
 
    def DFS(self, v):
 
        visited = set()
        self.DFSUtil(v, visited)
 
    def BFS(self, v):
 
        visited = set()
        queue = []
 
        visited.add(v)
        queue.append(v)
 
        while queue:
 
            s = queue.pop(0)
            print(s, end=' ')
 
            for neighbor in self.graph[s]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
 
 
g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)
 
print("Depth First Traversal (starting from vertex 2):")
g.DFS(2)
 
print("\nBreadth First Traversal (starting from vertex 2):")
g.BFS(2)



OUTPUT:-
Depth First Traversal (starting from vertex 2):
2 0 1 3 
Breadth First Traversal (starting from vertex 2):
2 0 3 1 

...Program finished with exit code 0
Press ENTER to exit console.
